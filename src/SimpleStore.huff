
/** 
 *  SIMPLE_STORE HUFF EXERCISE
 *
 *  One of the storage locations available to devs when writing smart contracts is Storage. Its persistent and expensive
 *  
 *  The task is to write within the `MAIN` macro below, 2 functions...
 *      - One named `store()` that takes one function argument and stores it in storage slot 0,
 *      - the second named `read()` that simply returns what is stored at storage slot 0.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function store(uint256) payable returns()
#define function read() payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // get 4 first bytes
    0x00
    calldataload
    0xe0
    shr

    // read()
    dup1
    __FUNC_SIG(read) eq
    read jumpi
    // store()
    __FUNC_SIG(store) eq
    store jumpi
    0x00 0x00 revert

    read:
        pop
        0x00 sload
        0x00 mstore
        retvalue jump

    store:
        0x04 calldataload
        0x00 sstore
        retvalue jump

    retvalue:
        0x20 0x00 return
}