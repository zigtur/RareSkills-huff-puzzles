
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    // get 4 first bytes
    0x00
    calldataload
    0xe0
    shr

    // add1(uint256) selector
    __FUNC_SIG(add1)
    eq
    addition
    // if selector is add1, jump to addition
    jumpi

    // revert otherwise
    0x00
    0x00
    revert

    addition:
        // Copy first argument in memory
        0x20
        0x04
        0x00
        calldatacopy

        // Load from memory
        0x00
        mload
        // Add 1
        0x01
        add

        // Store the result in memory
        0x00
        mstore

        // Return the value
        0x20
        0x00
        return
}